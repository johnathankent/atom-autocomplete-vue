'.text.html.vue':
  'Vue Template Tag':
    'prefix': 'vtemplate',
    'body': """
    <template${1: lang="pug"}>
    \t$0
    </template>
    """

  'Vue Component Function':
    'prefix': 'vcomponent',
    'body': """
    \${0}: () => ({
    \tcomponent: import('@/${1}/${2}.vue'),
    \tloading: require('@/${3}/${4}.vue').default,
    \terror: ${5},
    \tdelay: ${6: 200},
    \ttimeout: ${7: 5000}
    })
    """

  'Vue Script (Quick) Tag':
    'prefix': 'qvscript',
    'body': """
    <script>
    export default {
    \tname: '${0}',
    \tprops: {},
    \tdata: function () {
    \t\treturn {}
    \t},
    \tcomputed: {},
    \twatch: [],
    \tmethods: {}
    }
    </script>
    """

  'Vue Script Tag':
    'prefix': 'vscript',
    'body': """
    <script>
    export default {
    \tname: '',
    \tfunctional: <bool>,
    \tcomponents: {
    \t//  <ComponentName>: () => ({
    \t//    component: import('@/<componentspath>/<ComponentName>.vue'),
    \t//    loading: require('@/<componentspath>/<loadingComponentName>.vue').default,
    \t//    error: <ErrorComponentName>,
    \t//    delay: 200,
    \t//    timeout: 5000
    \t//  })
    \t},
    \tdirectives: {},
    \tfilters: {},
    \tmixins: [],
    \tmodel: {},
    \tprops: {},
    \tdata: function () {
    \t\treturn {}
    \t},
    \tcomputed: {
    \t\t<String>: function () {
    \t\t}
    \t},
    \twatch: [],
    \tbeforeCreate: function () {},
    \tcreated: function () {},
    \tbeforeMount: function () {},
    \tmounted: function () {},
    \tbeforeUpdate: function () {},
    \tupdated: function () {},
    \tactivated: function () {},
    \tdeactivated: function () {},
    \tbeforeDestroy: function () {},
    \tdestroyed: function () {},
    \t// Type: (err: Error, vm: Component, info: string) => ?boolean
    \terrorCaptured: function (Error, Component, String) {
    \t// logic
    \t\treturn <true|false>
    \t},
    \tmethods: {
    \t\t<String>: function () {
    \t\t}
    \t}
    }
    </script>
    """

  'Vue Style Tag':
    'prefix': 'vstyle',
    'body': """
    <style${1: lang="stylus"}${2: scoped}>
    \t$0
    </style>
    """

  'Vue New Component':
    'prefix': 'vnew',
    'body': """
    <template lang="${1: pug}">
    </template>

    <script>
    // For info on options, visit: https://vuejs.org/v2/api
    export default {
    \t// Side Effects (triggers effects outside the component)
    \t// Type: String
    \tel: '',

    \t// Global Awareness (requires knowledge beyond the component)
    \t// Type: String
    \tname: '',
    \t// Type: Vue Instance
    \tparent: '',

    \t// Component Type (changes the type of the component)
    \t// Type: Bool
    \tfunctional: false,

    \t// Template Dependencies (assets used in the template)
    \t// Type: Object
    \tcomponents: {
    \t//  <ComponentName>: () => ({
    \t//    component: import('@/<componentspath>/<ComponentName>.vue'),
    \t//    loading: require('@/<componentspath>/<loadingComponentName>.vue').default,
    \t//    error: <ErrorComponentName>,
    \t//    delay: 200,
    \t//    timeout: 5000
    \t//  })
    \t },
    \t// Type: Object
    \tdirectives: {},
    \t// Type: Object
    \tfilters: {},

    \t// Composition (merges properties into the options)
    \t// Type: Object | Function
    \textends: {},
    \t// Type: Array<Object>
    \tmixins: [],

    \t// Interface (the interface to the component)
    \t// Type: Boolean
    \tinheritAttrs: true,
    \t// Type: { prop?: String, event? String }
    \tmodel: {},
    \t// Type: Array<string> | Object
    \tprops: {},
    \t// Type: { [key: String]: any }
    \tpropsData: {},

    \t// Local State (local reactive properties)
    \t// Type: Object | Function
    \tdata: function () {
    \t\treturn {}
    \t},
    \t// Type: { [key: string]: Function | { get: Function, set: Function } }
    \tcomputed: {},

    \t// Events (callbacks triggered by reactive events)
    \t// Type: { [key: string]: string | Function | Object | Array }
    \twatch: {},

    \t// Lifecycle Events (in the order they are called)
    \t// Type: Function
    \tbeforeCreate: function () {},
    \tcreated: function () {},
    \tbeforeMount: function () {},
    \tmounted: function () {},
    \tbeforeUpdate: function () {},
    \tupdated: function () {},
    \tactivated: function () {},
    \tdeactivated: function () {},
    \tbeforeDestroy: function () {},
    \tdestroyed: function () {},
    \t// Type: (err: Error, vm: Component, info: string) => ?boolean
    \terrorCaptured: function (Error, Component, String) {
    \t// logic
    \t\treturn <true|false>
    \t},

    \t// Non-Reactive Properties (instance properties independent of the reactivity system)
    \t// Type: { [key: String]: Function }
    \tmethods: {},

    \t// Rendering (the declarative description of the component output)
    \t// Type: String
    \ttemplate: '',
    \t// Type: (createElement: () => { VNode, ctx }) => VNode
    \trender () {},
    \t// Type: (createElement: () => VNode, error: Error) => VNode
    \trenderError () {}
    }
    </script>

    <style${2: lang="stylus"}${3: scoped}>
    </style>
    """
